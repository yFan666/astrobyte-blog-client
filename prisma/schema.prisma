datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 用户模型
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String
  avatar        String?
  bio           String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
  likes         Like[]

  @@index([email])
}

// 文章模型
model Post {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  content     String    @db.LongText
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  views       Int       @default(0)

  @@index([authorId])
  @@fulltext([title, content])
}

// 分类模型
model Category {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(50)
  description String?   @db.Text
  posts       Post[]
  createdAt   DateTime  @default(now())

  @@index([name])
}

// 标签模型
model Tag {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(30)
  posts       Post[]
  createdAt   DateTime  @default(now())

  @@index([name])
}

// 评论模型
model Comment {
  id          String    @id @default(uuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post      @relation(fields: [postId], references: [id])
  postId      String

  @@index([authorId, postId])
}

// 点赞模型
model Like {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())

  @@unique([userId, postId])
  @@index([userId, postId])
}